@page "/"
@inject IJSRuntime JsRuntime

@using System.Text.Json
@using System.Globalization
@inject HttpClient Http

@inject WeatherForecastService ForecastService


@if (_forecasts == null)
{
    <p class="loading text-center position-absolute"><em>Loading...</em></p>
}
else
{
    <div class="wrapper d-flex flex-column align-items-center pb-4">
        <header class="pt-4 mb-sm-3 w-100 d-flex flex-column align-items-center">
            <SearchBar PlaceChanged="PlaceChangedHandler"></SearchBar>
            <div style="@(FadeInOut)" class=@($"container mt-md-4 pt-5 w-100 d-flex justify-content-center {Active}")>
                <WeatherCard WeatherInfo="@((WeatherForecast)_forecasts[0])"></WeatherCard>
            </div>
        </header>
    
        <div style="@(FadeInOut)" id="shortCardContainer" class=@($"mt-2 d-flex flex-wrap justify-content-around justify-content-lg-center w-100 {Active}")>
            <ShortWeatherCards @ref="_shortWeatherCards" ShortWeatherInfo="@(_forecasts)"></ShortWeatherCards>
            <AddMore OnShowMore="ShowMoreForecasts"></AddMore>
        </div>
    </div>
    <div>
    </div>
}


@code{

    private IShortWeatherForecast[] _forecasts;
    private ShortWeatherCards _shortWeatherCards;
    private string FadeInOut { get; set; } = "";
    // its only to animate first load of the site
    private string Active { get; set; } = "active";
    private static decimal[] position;

    protected override async Task OnInitializedAsync()
    {

        position = await JsRuntime.InvokeAsync<decimal[]>( "methods.GetLocation");


        // Warsaw geolocation
        decimal lat = 52.23M;
        decimal lon = 21;
        string name = "Warsaw";

        if (position != null && position.Length > 1)
        {

            lat = position[0];
            lon = position[1];

@*            string uri = $"https://localhost:44380/api/Place?Lat={lat.ToString(new CultureInfo("en-US"))}&Lon={lon.ToString(new CultureInfo("en-US"))}";*@
            string uri = $"https://api.radekkisiel.pl/api/Place?Lat={lat.ToString(new CultureInfo("en-US"))}&Lon={lon.ToString(new CultureInfo("en-US"))}";

            var response = await Http.GetAsync(uri);
            JsonElement data = JsonSerializer.Deserialize<JsonElement>(response.Content.ReadAsStringAsync().Result);

            name = data.GetProperty("results")[0].GetProperty("name").ToString();
    }

    _forecasts = await ForecastService.GetDataAsync(lat, lon, name);

    await Task.Delay(50);
    StateHasChanged();

    // waiting for the end of animation
    await Task.Delay(150);
    FadeInOut = "opacity: 1;";
    Active = "";
    StateHasChanged();
}

public async void PlaceChangedHandler(decimal lat, decimal lng, string name)
{
    FadeInOut = "opacity: 0;";
    StateHasChanged();

    // waiting for the end of transition
    await Task.Delay(150);

    _forecasts = await ForecastService.GetDataAsync(lat, lng, name);
    StateHasChanged();

    FadeInOut = "opacity: 1;";

    StateHasChanged();
}

private void ShowMoreForecasts()
{
    _shortWeatherCards.Styles = "opacity:1 ; max-height: none ; overflow: auto;";
}
}

